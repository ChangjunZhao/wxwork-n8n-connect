datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x"]
}

// NextAuth.js 用户认证模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text // 用于自定义认证
  role          String    @default("user") // admin, user
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  // 关联用户创建的连接（可选，用于权限控制）
  connections   WeixinConnection[] @relation("UserConnections")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WeixinConnection {
  id             String    @id @default(cuid())
  name           String
  corpId         String
  agentId        String
  token          String
  encodingAESKey String
  n8nWebhookUrl  String? // Optional
  eventLogs     EventLog[]
  
  // 添加用户关联（可选）
  userId        String?
  user          User?     @relation("UserConnections", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([corpId, agentId], name: "corpId_agentId_unique_constraint")
}

model EventLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  connectionId String
  connection   WeixinConnection @relation(fields: [connectionId], references: [id])
  eventType    String
  status       String
  details      String   @db.Text
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([timestamp])
  @@index([connectionId])
  @@index([eventType])
  @@index([status])
}
